<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2013 The Khronos Group Inc.
  
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and/or associated documentation files (the
  "Materials"), to deal in the Materials without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Materials, and to
  permit persons to whom the Materials are furnished to do so, subject to
  the following conditions:
  
  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Materials.
  
  THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
-->
<!--
  Relax NG schema for Khronos Registry XML
  See http://www.opengl.org/registry/
  
  Last modified 2013/06/14
  This definition is subject to change (mostly in the form of additions)
-->
<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <!--
    Toplevel is a <registry> tag.
    May be led by an optional <comment> tag containing e.g. copyrights.
  -->
  <start>
    <element name="registry">
      <zeroOrMore>
        <choice>
          <optional>
            <element name="comment">
              <text/>
            </element>
          </optional>
          <zeroOrMore>
            <ref name="Types"/>
          </zeroOrMore>
          <zeroOrMore>
            <ref name="Groups"/>
          </zeroOrMore>
          <zeroOrMore>
            <ref name="Enums"/>
          </zeroOrMore>
          <zeroOrMore>
            <ref name="Commands"/>
          </zeroOrMore>
          <zeroOrMore>
            <ref name="Feature"/>
          </zeroOrMore>
          <zeroOrMore>
            <ref name="Extensions"/>
          </zeroOrMore>
        </choice>
      </zeroOrMore>
    </element>
  </start>
  <!-- <types> defines a group of types -->
  <define name="Types">
    <element name="types">
      <zeroOrMore>
        <ref name="Type"/>
      </zeroOrMore>
    </element>
  </define>
  <!--
    <type> defines a single type. It is usually a C typedef but
    may contain arbitrary C code.
      name - name of this type, if not present in the <name> tag
      api - matches a <feature> api attribute, if present
      requires - name of another type definition required by this one
      type - "group", if present, indicating a group of values in the
          corresponding <enums> definition.
      comment - unused
      <apientry /> - substitutes for an APIENTRY-style macro on output
      <name> - contains typename
  -->
  <define name="Type">
    <element name="type">
      <optional>
        <attribute name="api"/>
      </optional>
      <optional>
        <attribute name="requires"/>
      </optional>
      <optional>
        <attribute name="name">
          <ref name="TypeName"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="type"/>
      </optional>
      <optional>
        <ref name="Comment"/>
      </optional>
      <text/>
      <optional>
        <element name="apientry">
          <text/>
        </element>
      </optional>
      <text/>
      <optional>
        <element name="name">
          <ref name="TypeName"/>
        </element>
      </optional>
      <text/>
    </element>
  </define>
  <!-- <groups> defines a group of enum groups -->
  <define name="Groups">
    <element name="groups">
      <zeroOrMore>
        <ref name="Group"/>
      </zeroOrMore>
    </element>
  </define>
  <!--
    <group> defines a single enum group. Enums may
    be in multiple groups.
      name - group name
      comment - unused
      <enum name=""> - members of the group
  -->
  <define name="Group">
    <element name="group">
      <ref name="Name"/>
      <optional>
        <ref name="Comment"/>
      </optional>
      <zeroOrMore>
        <element name="enum">
          <ref name="Name"/>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!--
    <enums> defines a group of enumerants
      namespace - identifies a numeric namespace
      group - identifies a functional subset of the namespace - same as <group name="">
      start, end - beginning and end of a numeric range in the namespace
      vendor - owner of the numeric range
      type - "bitmask", if present
      comment - unused
  -->
  <define name="Enums">
    <element name="enums">
      <optional>
        <attribute name="namespace"/>
      </optional>
      <optional>
        <attribute name="group"/>
      </optional>
      <optional>
        <attribute name="type"/>
      </optional>
      <optional>
        <attribute name="start">
          <ref name="Integer"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="end">
          <ref name="Integer"/>
        </attribute>
      </optional>
      <optional>
        <ref name="Vendor"/>
      </optional>
      <optional>
        <ref name="Comment"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="Enum"/>
          <ref name="Unused"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!--
    <enum> defines a single enumerant
      value - integer (including hex) value of the enumerant
      api - matches a <feature> api attribute, if present
      type - "u" (unsigned), "ull" (uint64), or integer if not present
      name - enumerant name
      alias - another enumerant this is semantically identical to
      comment - unused
  -->
  <define name="Enum">
    <element name="enum">
      <interleave>
        <attribute name="value">
          <ref name="Integer"/>
        </attribute>
        <optional>
          <attribute name="api"/>
        </optional>
        <optional>
          <attribute name="type">
            <ref name="TypeSuffix"/>
          </attribute>
        </optional>
        <attribute name="name"/>
        <optional>
          <attribute name="alias"/>
        </optional>
        <optional>
          <ref name="Comment"/>
        </optional>
      </interleave>
    </element>
  </define>
  <!--
    <unused> defines a range of enumerants not currently being used
      start, end - beginning and end of an unused numeric range
      vendor - unused
      comment - unused
  -->
  <define name="Unused">
    <element name="unused">
      <attribute name="start">
        <ref name="Integer"/>
      </attribute>
      <optional>
        <attribute name="end">
          <ref name="Integer"/>
        </attribute>
      </optional>
      <optional>
        <ref name="Vendor"/>
      </optional>
      <optional>
        <ref name="Comment"/>
      </optional>
    </element>
  </define>
  <!--
    <commands> defines a group of commands
      namespace - identifies a function namespace
  -->
  <define name="Commands">
    <element name="commands">
      <optional>
        <attribute name="namespace"/>
      </optional>
      <zeroOrMore>
        <ref name="Command"/>
      </zeroOrMore>
    </element>
  </define>
  <!--
    <command> defines a single command
      <proto> is the C function prototype, including the return type
      <param> are function parameters, in order
        <ptype> is a <type> name, if present
        <name> is the function / parameter name
    The textual contents of <proto> and <param> should be legal C
    for those parts of a function declaration.
      <alias> - denotes function aliasing
        name - name of aliased function
      <vecequiv> - denotes scalar / vector function equivalence
        name - name of corresponding vector form, e.g. (glColor3f -> glColor3fv)
      <glx> - information about GLX protocol
        type - "render", "single", or "vendor" for GLXRender, GLXSingle, GLXVendorPrivate{WithReply}
        opcode - numeric opcode of specified type for this function
        name - if present, protocol name (defaults to command name)
        comment - unused
  -->
  <define name="Command">
    <element name="command">
      <optional>
        <ref name="Comment"/>
      </optional>
      <element name="proto">
        <optional>
          <attribute name="group"/>
        </optional>
        <text/>
        <optional>
          <element name="ptype">
            <ref name="TypeName"/>
          </element>
        </optional>
        <text/>
        <element name="name">
          <text/>
        </element>
        <text/>
      </element>
      <zeroOrMore>
        <element name="param">
          <optional>
            <attribute name="group"/>
          </optional>
          <optional>
            <attribute name="len"/>
          </optional>
          <text/>
          <optional>
            <element name="ptype">
              <ref name="TypeName"/>
            </element>
          </optional>
          <text/>
          <element name="name">
            <text/>
          </element>
          <text/>
        </element>
      </zeroOrMore>
      <interleave>
        <optional>
          <element name="alias">
            <ref name="Name"/>
          </element>
        </optional>
        <optional>
          <element name="vecequiv">
            <ref name="Name"/>
          </element>
        </optional>
        <zeroOrMore>
          <element name="glx">
            <attribute name="type"/>
            <attribute name="opcode">
              <data type="integer"/>
            </attribute>
            <optional>
              <ref name="Name"/>
            </optional>
            <optional>
              <ref name="Comment"/>
            </optional>
          </element>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <!--
    Each <feature> defines the interface of an API version (e.g. OpenGL 1.2)
      api - API tag (e.g. 'gl', 'gles2', etc. - used internally, not
        neccessarily an actual API name
      name - version name (C preprocessor name, e.g. GL_VERSION_4_2)
      number - version number, e.g. 4.2
      protect - additional #ifdef symbol to place around the feature
      <require> / <remove> contains features to require or remove in
                           this version
        profile - only require/remove when generated profile matches
        comment - unused
  -->
  <define name="Feature">
    <element name="feature">
      <attribute name="api"/>
      <ref name="Name"/>
      <attribute name="number">
        <data type="decimal"/>
      </attribute>
      <optional>
        <attribute name="protect"/>
      </optional>
      <optional>
        <ref name="Comment"/>
      </optional>
      <zeroOrMore>
        <choice>
          <element name="require">
            <optional>
              <ref name="ProfileName"/>
            </optional>
            <optional>
              <ref name="Comment"/>
            </optional>
            <zeroOrMore>
              <ref name="InterfaceElement"/>
            </zeroOrMore>
          </element>
          <element name="remove">
            <optional>
              <ref name="ProfileName"/>
            </optional>
            <optional>
              <ref name="Comment"/>
            </optional>
            <zeroOrMore>
              <ref name="InterfaceElement"/>
            </zeroOrMore>
          </element>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="Extensions">
    <element name="extensions">
      <zeroOrMore>
        <ref name="Extension"/>
      </zeroOrMore>
    </element>
  </define>
  <!--
    Defines the interface of an API <extension>. Like a <feature>
    tag, but with a slightly different api attribute.
      api - regexp pattern matching one or more API tags, indicating
        which APIs the extension is known to work with. The only
        syntax supported is <name>{|<name>}* and each name must
        exactly match an API being generated (implicit ^$ surrounding).
    In addition, <require> / <remove> tags also support an
    api attribute:
        api - only require/remove these features for the matching API.
          Not a regular expression.
  -->
  <define name="Extension">
    <element name="extension">
      <ref name="Name"/>
      <optional>
        <attribute name="protect"/>
      </optional>
      <optional>
        <attribute name="supported">
          <ref name="StringGroup"/>
        </attribute>
      </optional>
      <optional>
        <ref name="Comment"/>
      </optional>
      <zeroOrMore>
        <choice>
          <element name="require">
            <optional>
              <attribute name="api"/>
            </optional>
            <optional>
              <ref name="ProfileName"/>
            </optional>
            <optional>
              <ref name="Comment"/>
            </optional>
            <zeroOrMore>
              <ref name="InterfaceElement"/>
            </zeroOrMore>
          </element>
          <element name="remove">
            <optional>
              <attribute name="api"/>
            </optional>
            <optional>
              <ref name="ProfileName"/>
            </optional>
            <optional>
              <ref name="Comment"/>
            </optional>
            <zeroOrMore>
              <ref name="InterfaceElement"/>
            </zeroOrMore>
          </element>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!--
    Contents of a <require> / <remove> tag, defining a group
    of features to require or remove.
      <type> / <enum> / <command> all have attributes
        name - feature name which must match
  -->
  <define name="InterfaceElement">
    <choice>
      <element name="type">
        <ref name="Name"/>
        <optional>
          <ref name="Comment"/>
        </optional>
      </element>
      <element name="enum">
        <ref name="Name"/>
        <optional>
          <ref name="Comment"/>
        </optional>
      </element>
      <element name="command">
        <ref name="Name"/>
        <optional>
          <ref name="Comment"/>
        </optional>
      </element>
    </choice>
  </define>
  <!--
    Integers are allowed to be either decimal or C-hex (0x[0-9A-F]+), but
    XML Schema types don't seem to support hex notation, so we use this
    as a placeholder.
  -->
  <define name="Integer">
    <text/>
  </define>
  <!-- TypeName is an argument/return value C type name -->
  <define name="TypeName">
    <text/>
  </define>
  <!-- TypeSuffix is a C numeric type suffix, e.g. 'u' or 'ull' -->
  <define name="TypeSuffix">
    <text/>
  </define>
  <!--
    StringGroup is a regular expression with an implicit
      '^(' and ')$' bracketing it.
  -->
  <define name="StringGroup">
    <text/>
  </define>
  <!-- Repeatedly used attributes -->
  <define name="ProfileName">
    <attribute name="profile"/>
  </define>
  <define name="Vendor">
    <attribute name="vendor"/>
  </define>
  <define name="Comment">
    <attribute name="comment"/>
  </define>
  <define name="Name">
    <attribute name="name"/>
  </define>
</grammar>
